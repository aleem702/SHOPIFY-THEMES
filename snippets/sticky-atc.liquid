{% style %}
  .product-block-{{ block.id }} {
    padding-top: {{ block.settings.padding_top }}px;
    padding-bottom: {{ block.settings.padding_bottom }}px;
    --product-title-color: {{ block.settings.product_title_color }};
    --product-option-color: {{ block.settings.product_option_color }};
    --product-title-size: {{ block.settings.title_size }}px;
    --product-option-size: {{ block.settings.option_size }}px;
  }

  #section-block-{{ block.id }}.sticky-atc {
    .price {
      .price-item,
      .price-item--sale,
      span.price-item.price-item--sale.price-item--last {
        {% if block.settings.price_color != blank %}
          color: {{ block.settings.price_color }} !important;
        {% endif %}
        {% if block.settings.price_size != blank %}
          font-size: {{ block.settings.price_size }}px !important;
          line-height: 1 !important;
        {% endif %}
      }

      .price__compare-price {
        .price-item--regular {
          {% if block.settings.compare_price_color != blank %}
            color: {{ block.settings.compare_price_color }} !important;
          {% endif %}
          {% if block.settings.comp_price_size != blank %}
            font-size: {{ block.settings.comp_price_size }}px !important;
            line-height: 1 !important;
          {% endif %}
        }
      }
    }

    .button {
      .product-form-button-text,
      .product-form-button-text:before {
        {% if block.settings.button_text_color != blank %}
          color: {{ block.settings.button_text_color }} !important;
          font-size: 15px !important;
          line-height: 1 !important;
        {% endif %}
      }
    }

    {% if block.settings.show_price == false %}
      .sticky-atc__price .price--on-sale span.price-item {
        display: none !important;
      }
    {% endif %}

    {% if block.settings.show_compare_at_price == false %}
      .sticky-atc__price .price--on-sale span.price__compare-price {
        display: none !important;
      }
    {% endif %}
  }

  @media (max-width: 768px) {
    #section-block-{{ block.id }}.sticky-atc {
      .badge.price__badge-sale {
        line-height: 1;
        padding: 0.2rem;
        gap: 0;
        font-size: 1rem;
        border-radius: 0.4rem;
      }

      .price {
        .price__compare-price .price-item--regular {
          font-size: {{ block.settings.comp_price_size | minus: 3 }}px !important;
          font-weight: 600;
        }

        .price-item,
        .price-item--sale,
        span.price-item.price-item--sale.price-item--last {
          font-size: {{ block.settings.price_size | minus: 3 }}px !important;
          font-weight: 600;
        }
      }

      .sticky-atc__image img {
        height: 40px;
      }
    }
  }

  #section-block-{{ block.id }}.sticky-atc--after-scroll {
    transform: translateY(200%);
  }
{% endstyle %}

{%- assign atc_class = 'sticky-atc' -%}
{%- if block.settings.display_when == 'after_scroll' -%}
  {%- assign atc_class = atc_class | append: ' sticky-atc--after-scroll' -%}
{%- endif -%}

<div
  id="section-block-{{ block.id }}"
  class="{{ atc_class }} product-block-{{ block.id }} color-{{ block.settings.color_scheme }} sticky-atc-mobile-button-only"
>
  <div class="sticky-atc-container">
    <div class="sticky-atc__left">
      <div class="sticky-atc__image">
        {{ product.featured_image | image_url: height: 200 | image_tag }}
      </div>
      <div class="sticky-atc__left-inner">
        <h3 class="sticky-atc__title">{{ product.title | truncate: 26, '...' }}</h3>
          <div class="sticky-atc__price" id="atc-price-{{ section.id }}">
            {%- render 'price',
              product: product,
              use_variant: true,
              show_badges: block.settings.show_price_badge,
              price_class: '',
              hide_currency_code: true,
              block: block
            -%}
          </div>
      </div>
    </div>

    <div class="sticky-atc__right">
      {%- if block.settings.show_variant_selector -%}
        <div class="sticky-atc__dropdowns">
          {%- for option in product.options_with_values -%}
            <div class="sticky-atc__dropdown-wrapper">
              <label for="sticky-dropdown-{{ forloop.index0 }}">{{ option.name }}</label>
              <div class="select-wrapper" style="position: relative;">
                <select
                  id="sticky-dropdown-{{ forloop.index0 }}"
                  class="sticky-atc__dropdown"
                  data-option="{{ option.name }}"
                >
                  {%- for value in option.values -%}
                    <option
                      value="{{ value }}"
                      {% if option.selected_value == value %}selected{% endif %}
                    >
                      {{ value }}
                    </option>
                  {%- endfor -%}
                </select>
                <svg aria-hidden="true" focusable="false" class="icon icon-caret" viewBox="0 0 10 6">
                  <path fill-rule="evenodd" clip-rule="evenodd" d="M9.354.646a.5.5 0 0 0-.708 0L5 4.293 1.354.646a.5.5 0 0 0-.708.708l4 4a.5.5 0 0 0 .708 0l4-4a.5.5 0 0 0 0-.708" fill="currentColor"/>
                </svg>
              </div>
            </div>
          {%- endfor -%}
        </div>
      {%- endif -%}

      <div class="sticky-atc__button">
        {%- liquid
          assign check_against_inventory = true
          if product.selected_or_first_available_variant.inventory_management != 'shopify' or product.selected_or_first_available_variant.inventory_policy == 'continue'
            assign check_against_inventory = false
          endif
          if product.selected_or_first_available_variant.quantity_rule.min > product.selected_or_first_available_variant.inventory_quantity and check_against_inventory
            assign quantity_rule_soldout = true
          endif
        -%}
        <button
          type="submit"
          name="add"
          class="button color-{{ block.settings.button_color_scheme }} split-slide-button"
          id="atc-button-{{ section.id }}"
          form="{{ product_form_id }}"
          {% if product.selected_or_first_available_variant.available == false or quantity_rule_soldout %}disabled{% endif %}
        >
          <div class="split-slide-right"></div>
          <span class="product-added-success hidden">Added âœ“</span>
          <span
            class="product-form-button-text button-text"
            style="{%- if block.settings.bold_sticky_atc_text -%}font-weight: 600;{%- endif -%}"
          >
            {%- if product.selected_or_first_available_variant.available == false or quantity_rule_soldout -%}
              {{ 'products.product.sold_out' | t | capitalize }}
            {%- else -%}
              {{ block.settings.button_label | capitalize }}
            {%- endif -%}
          </span>
          <div class="loading-overlay__spinner hidden">
            <svg aria-hidden="true" focusable="false" class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
              <circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30" stroke="#ffffff"/>
            </svg>
          </div>
        </button>
      </div>
    </div>
  </div>
</div>

<script defer>
  const checkATCScroll = () => {
    window.requestAnimationFrame(() => {
     const stickyAtc = document.querySelector('.sticky-atc');
      
    // Function to find the best ATC button to track
    const findBestATCButton = () => {
      // Priority order: visible bundler button > main product button > any visible atc button
      const bundlerButton = document.getElementById('atlas-add-bundle-btn');
      const mainButton = document.getElementById('my-add-to-cart-button');
      const allATCButtons = document.querySelectorAll('.atc-button');
      
      // Check if bundler button is visible and available
      if (bundlerButton && bundlerButton.offsetParent !== null && getComputedStyle(bundlerButton).display !== 'none') {
        return bundlerButton;
      }
      
      // Fallback to main product button if visible
      if (mainButton && mainButton.offsetParent !== null) {
        return mainButton;
      }
      
      // Final fallback: find any visible ATC button
      for (let button of allATCButtons) {
        if (button.offsetParent !== null && getComputedStyle(button).display !== 'none') {
          return button;
        }
      }
      
      return null;
    };
    
    const regularATC = findBestATCButton();
      
      if (!stickyAtc || !regularATC) return;
      
      const atcPosition = regularATC.getBoundingClientRect().top + window.scrollY + regularATC.offsetHeight;
      if (window.scrollY > atcPosition) {
        stickyAtc.classList.add('sticky-atc--active');
      } else {
        stickyAtc.classList.remove('sticky-atc--active');
      }
    })
  };

  const handleDropdownChange = (event) => {
    const selectedOption = event.target.getAttribute('data-option');
    const selectedValue = event.target.value;
    const selectElement = document.querySelector(`select[name="options[${selectedOption}]"]`);
    
    const dispatchChange = (el) => {
      el.dispatchEvent(new Event('change', { bubbles: true }));
    };
    
    const updateRadioInput = (containerSelector) => {
      const container = document.querySelector(containerSelector);
      if (!container) return false;
      
      const input = container.querySelector(`input[value="${selectedValue}"]`);
      if (input) {
        input.checked = true;
        dispatchChange(container);
        return true;
      }
      return false;
    };
    
    if (!updateRadioInput('variant-radios') && !updateRadioInput('hybrid-variant-picker') && selectElement) {
      selectElement.value = selectedValue;
      dispatchChange(selectElement);
    }
  };

  document.addEventListener('DOMContentLoaded', () => {
    const atcButton = document.getElementById('atc-button-{{ section.id }}');
    if (atcButton) {
      atcButton.addEventListener('click', () => {
        const myAddToCartButton = document.getElementById('my-add-to-cart-button');
        if (myAddToCartButton && !myAddToCartButton.disabled) {
          myAddToCartButton.click();
        }
      });
    }

    document.querySelectorAll('.sticky-atc__dropdown').forEach(dropdown => {
      dropdown.addEventListener('change', handleDropdownChange);
    });

    checkATCScroll();
  });

  document.addEventListener('scroll', checkATCScroll);

  // Monitor for bundler button visibility changes
  const observeBundlerButton = () => {
    const bundlerButton = document.getElementById('atlas-add-bundle-btn');
    if (bundlerButton) {
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.type === 'attributes' && mutation.attributeName === 'style') {
            // Re-check scroll position when bundler button visibility changes
            checkATCScroll();
          }
        });
      });
      
      observer.observe(bundlerButton, { 
        attributes: true, 
        attributeFilter: ['style'] 
      });
    }
  };

  // Initialize bundler button observer
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', observeBundlerButton);
  } else {
    observeBundlerButton();
  }

  if (Shopify.designMode) {
    const sectionId = "{{ section.id }}";
  
    document.addEventListener('shopify:section:unload', (event) => {
      if (event.detail.sectionId === sectionId) {
        checkATCScroll();
      }
    });
  
    document.addEventListener('shopify:section:load', (event) => {
      if (event.detail.sectionId === sectionId) {
        checkATCScroll();
      }
    });
  }
</script>
