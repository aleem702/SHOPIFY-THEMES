{{ 'section-image-comparison-slider.css' | asset_url | stylesheet_tag }}
{%- liquid
  assign global_heading_size = settings.enable_global_heading_font_size
  assign global_body_size = settings.enable_global_body_font_size
  assign global_color = settings.enable_global_color
  assign section_id_variable = section.id
-%}

{% if request.visual_preview_mode %}
 {% comment %} For rendering in the theme editor visual preview. {% endcomment %}
 {% assign section_id_variable = "id" %}
{% endif %}

{% style %}
  {%- if request.visual_preview_mode -%}
    {% comment %} don't want fade-in animation in preview mode because it messes up preview {% endcomment %}
    .animation_section,
    .animation_section * {
      opacity: 1 !important;
      transform: none !important;
      transition: none !important;
      will-change: auto !important;
    }
  {%- endif -%}
  
  /* Section Container Styles */
  #shopify-section-{{ section_id_variable }} .section__image_comparison_slider {
    padding: 5px 0;
  }

  .section-container-{{ section_id_variable }} {
    padding-top: {{ section.settings.padding_top }}px;
    padding-bottom: {{ section.settings.padding_bottom }}px;
  }
  
  @media screen and (max-width: 768px) {
    .section-container-{{ section_id_variable }} {
      padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
      padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
    }
  }

  /* Heading Styles */
  #heading-{{ section_id_variable }} {
    font-size: {% if global_heading_size %}var(--font-heading-size)!important{% else %}{{ section.settings.heading_size }}px!important{% endif %};
    line-height: {% if global_heading_size %}calc(var(--font-heading-size) + 8px)!important{% else %}{{ section.settings.heading_size | plus: 8 }}px!important{% endif %};
    color: {% if global_color %}rgb(var(--color-base-heading)){% else %}{{ section.settings.heading_color }}{% endif %};
    --color-highlighted-color: {{ section.settings.bolded_heading_color }};
  }

  @media (max-width: 768px) {
    #heading-{{ section_id_variable }} {
      font-size: {% if global_heading_size %}var(--font-heading-mob-size) !important{% else %}{{ section.settings.heading_mob_size }}px!important{% endif %};
      line-height: {% if global_heading_size %}calc(var(--font-heading-mob-size) + 8px) !important{% else %}{{ section.settings.heading_mob_size | plus: 8 }}px!important{% endif %};
    }
  }

  /* Body Text Styles */
  #section-body-text-{{ section_id_variable }},
  #section-body-text-{{ section_id_variable }} p {
    font-size: {% if global_body_size %}var(--global-body-text-font-size){% else %}{{ section.settings.body_size }}px{% endif %} !important;
    line-height: {% if global_body_size %}calc(var(--global-body-text-font-size) + 8px){% else %}{{ section.settings.body_size | plus: 8 }}px{% endif %} !important;
    color: {% if global_color %}rgb(var(--color-base-text)){% else %}{{ section.settings.body_color }}{% endif %} !important;
  }
 
  #section-body-text-{{ section_id_variable }} strong {
    color: {{ section.settings.bolded_body_color }};
  }

  @media (max-width: 768px) {
    #section-body-text-{{ section_id_variable }} p,
    #section-body-text-{{ section_id_variable }} {
      font-size: {% if global_body_size %}var(--global-body-text-font-size)!important{% else %}{{ section.settings.body_size }}px !important{% endif %};
    }
  }
{% endstyle %}

{%- style -%}
  /* Layout Styles */
  #leftSideContainer-{{ section_id_variable }} {
    text-align: center;
  }

  @media (min-width: 768px) { 
    #leftSideContainer-{{ section_id_variable }} {
      {% if section.settings.layout_desktop == 'slider_first' %}
        padding-left: 40px;
      {% else %}
        padding-right: 40px;
      {% endif %}
    }
  }

  .section-container-{{ section_id_variable }} {
    display: flex;
    align-items: stretch;
    {% if section.settings.layout_desktop == 'slider_second' %}
      flex-direction: row;
    {% else %}
      flex-direction: row-reverse;
    {% endif %}
  }

  @media screen and (max-width: 750px) {
    .section-container-{{ section_id_variable }} {
      {% if section.settings.layout_mobile == 'slider_second_mobile' %}
        flex-direction: column;
      {% else %}
        flex-direction: column-reverse;
      {% endif %}
    }
  }
{%- endstyle -%}

<div class="section__image_comparison_slider color-{{ section.settings.color_scheme }}">
  <div class="page-width section-container-{{ section_id_variable }}">
    <div id="leftSideContainer-{{ section_id_variable }}" class="half color-{{ section.settings.content_color_scheme }}" style='display:flex; align-items:center;'>
      <div style="margin-bottom: 15px; width: 100%;">
        <h2 id="heading-{{ section_id_variable }}" class="title">
          {{ section.settings.content_heading }}
        </h2>
  
      {% if section.settings.content_text != blank %}
        <div id="section-body-text-{{ section_id_variable }}">
          {{ section.settings.content_text }}
        </div>
      {% endif %}
      
      {%- if section.settings.button_label != blank -%}
          <div class="slider-button-container">
            <a
              {% if section.settings.link %}
                href="{{ section.settings.link }}"
              {% else %}
                aria-disabled="true"
              {% endif %}
              class="button button--primary split-slide-button"
            >
              <div class="split-slide-right"></div>
              <span class="button-text">
                {{- section.settings.button_label | escape -}}
              </span>
            </a>
        </div>
      {%- endif -%}
      </div>
    </div>
  
    <div id="rightSideContainer-{{ section_id_variable }}" class="half flex-align-center color-{{ section.settings.scrolling_text_color_scheme }}">
      <div class="image-compare" data-section-id="{{ section_id_variable }}">
        {% unless section.settings.before_label == blank %}
          <div class="label label--before color-{{ section.settings.labels_color_scheme }}">
            <span>{{ section.settings.before_label }}</span>
          </div>
        {% endunless %}
  
        <div class="image-wrapper">
          <div class="image image--before color-{{ section.settings.color_scheme }}">
            {%- if section.settings.before_image != blank -%}
              {{ section.settings.before_image | image_url: width: 1000 | image_tag: loading: 'lazy', width: 450 }}
            {%- endif -%}
          </div>
  
          <div class="image image--after color-{{ section.settings.color_scheme }}">
            {%- if section.settings.after_image != blank -%}
              {{ section.settings.after_image | image_url: width: 1000 | image_tag: loading: 'lazy', width: 450 }}
            {%- else -%}
              {{ 'image' | placeholder_svg_tag: 'placeholder' }}
            {%- endif -%}
          </div>
  
          <div class="divider color-{{ section.settings.line_color }}">
            <span class="divider__arrow divider__arrow--left"></span>
            <span class="divider__arrow divider__arrow--right"></span>
          </div>
  
          <input
            type="range"
            class="slider-control"
            min="0"
            max="100"
            value="{{ section.settings.default_slider_position | default: 50 }}"
            aria-label="Image comparison slider"
          >
        </div>
  
        {% unless section.settings.after_label == blank %}
          <div class="label label--after color-{{ section.settings.labels_color_scheme }}">
            <span>{{ section.settings.after_label }}</span>
          </div>
        {% endunless %}
      </div>
    </div>
  </div>
</div>

<script>
  class ImageCompare{{ section.id | replace: '-', '' }} {
    constructor(container) {
      this.container = container;
      this.slider = container.querySelector('.slider-control');
      this.beforeImage = container.querySelector('.image--before');
      this.afterImage = container.querySelector('.image--after');
      this.divider = container.querySelector('.divider');
      this.beforeLabel = container.querySelector('.label--before');
      this.afterLabel = container.querySelector('.label--after');

      this.bindEvents();
      this.updateImages(this.slider.value);
    }

    bindEvents() {
      this.slider.addEventListener('input', () => this.updateImages(this.slider.value));
    }

    updateImages(value) {
      this.beforeImage.style.clipPath = `inset(0 ${100 - value}% 0 0)`;
      this.afterImage.style.clipPath = `inset(0 0 0 ${value}%)`;
      this.divider.style.left = `${value}%`;

      if (value >= 85) {
        this.afterLabel.style.display = 'none';
        this.beforeLabel.style.display = 'block';
      } else if (value <= 15) {
        this.beforeLabel.style.display = 'none';
        this.afterLabel.style.display = 'block';
      } else {
        this.beforeLabel.style.display = 'block';
        this.afterLabel.style.display = 'block';
      }
    }
  }

  document.querySelectorAll('.image-compare').forEach((container) => {
    new ImageCompare{{ section.id | replace: '-', '' }}(container);
  });

  if (Shopify.designMode) {
    const sectionId = "{{ section_id_variable }}";
    const reloadImageCompare = () => {
      document.querySelectorAll('.image-compare').forEach((container) => {
        new ImageCompare{{ section.id | replace: '-', '' }}(container);
      });
    };

    document.addEventListener('shopify:section:unload', (event) => {
      if (event.detail.sectionId === sectionId) reloadImageCompare();
    });

    document.addEventListener('shopify:section:load', (event) => {
      if (event.detail.sectionId === sectionId) reloadImageCompare();
    });
  }
</script>

{% schema %}
{
  "name": "Before and after",
  "class": "section animation_section",
  "settings": [
    {
      "type": "inline_richtext",
      "id": "content_heading",
      "default": "Our exciting results",
      "label": "Heading"
    },
    {
      "type": "richtext",
      "id": "content_text",
      "default": "<p>Talk about how and why is your brand better than the others.</p>",
      "label": "Body"
    },
    {
      "type": "image_picker",
      "id": "before_image",
      "label": "Before image"
    },
    {
      "type": "image_picker",
      "id": "after_image",
      "label": "After image"
    },
    {
      "type": "inline_richtext",
      "id": "before_label",
      "label": "Before label",
      "default": "Before"
    },
    {
      "type": "inline_richtext",
      "id": "after_label",
      "label": "After label",
      "default": "After"
    },
    {
      "type": "inline_richtext",
      "id": "button_label",
      "label": "Button label",
      "info": "Note: Leave blank to hide"
    },
    {
      "type": "url",
      "id": "link",
      "label": "Button link"
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "select",
      "id": "layout_desktop",
      "label": "Desktop placement",
      "options": [
        {
          "value": "slider_first",
          "label": "Slider first"
        },
        {
          "value": "slider_second",
          "label": "Slider second"
        }
      ],
      "default": "slider_second"
    },
    {
      "type": "select",
      "id": "layout_mobile",
      "label": "Mobile placement",
      "options": [
        {
          "value": "slider_first_mobile",
          "label": "Slider first"
        },
        {
          "value": "slider_second_mobile",
          "label": "Slider second"
        }
      ],
      "default": "slider_second_mobile"
    },
    {
      "type": "range",
      "id": "heading_size",
      "min": 20,
      "max": 50,
      "step": 1,
      "unit": "px",
      "label": "Desktop heading size",
      "default": 40
    },
    {
      "type": "range",
      "id": "heading_mob_size",
      "min": 10,
      "max": 40,
      "step": 1,
      "unit": "px",
      "label": "Mobile heading size",
      "default": 28
    },
    {
      "type": "range",
      "id": "body_size",
      "min": 16,
      "max": 54,
      "step": 1,
      "unit": "px",
      "label": "Body font size",
      "default": 16
    },
    {
      "type": "range",
      "id": "default_slider_position",
      "label": "Default slider position",
      "min": 0,
      "max": 100,
      "default": 50
    },
    {
      "type": "header",
      "content": "Styling"
    },
    {
      "type": "color",
      "id": "heading_color",
      "label": "Heading color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "bolded_heading_color",
      "label": "Bolded heading color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "body_color",
      "label": "Body color",
      "default": "#000000"
    },
    {
      "type": "color",
      "id": "bolded_body_color",
      "label": "Bolded body color",
      "default": "#000000"
    },
    {
      "type": "select",
      "id": "labels_color_scheme",
      "options": [
        {
          "value": "accent-1",
          "label": "t:sections.all.colors.accent_1.label"
        },
        {
          "value": "accent-2",
          "label": "t:sections.all.colors.accent_2.label"
        },
        {
          "value": "accent-3",
          "label": "t:sections.all.colors.accent_3.label"
        },
        {
          "value": "custom-color-1",
          "label": "t:sections.all.colors.custom_color_1.label"
        },
        {
          "value": "custom-color-2",
          "label": "t:sections.all.colors.custom_color_2.label"
        },
        {
          "value": "inverse",
          "label": "t:sections.all.colors.inverse.label"
        }
      ],
      "default": "accent-2",
      "label": "Labels color scheme"
    },
    {
      "type": "select",
      "id": "line_color",
      "options": [
        {
          "value": "accent-1",
          "label": "t:sections.all.colors.accent_1.label"
        },
        {
          "value": "accent-2",
          "label": "t:sections.all.colors.accent_2.label"
        },
        {
          "value": "accent-3",
          "label": "t:sections.all.colors.accent_3.label"
        },
        {
          "value": "custom-color-1",
          "label": "t:sections.all.colors.custom_color_1.label"
        },
        {
          "value": "custom-color-2",
          "label": "t:sections.all.colors.custom_color_2.label"
        },
        {
          "value": "inverse",
          "label": "t:sections.all.colors.inverse.label"
        }
      ],
      "default": "accent-1",
      "label": "Separator color"
    },
    {
      "type": "select",
      "id": "color_scheme",
      "options": [
        {
          "value": "accent-1",
          "label": "t:sections.all.colors.accent_1.label"
        },
        {
          "value": "accent-2",
          "label": "t:sections.all.colors.accent_2.label"
        },
        {
          "value": "accent-3",
          "label": "t:sections.all.colors.accent_3.label"
        },
        {
          "value": "custom-color-1",
          "label": "t:sections.all.colors.custom_color_1.label"
        },
        {
          "value": "custom-color-2",
          "label": "t:sections.all.colors.custom_color_2.label"
        },
        {
          "value": "inverse",
          "label": "t:sections.all.colors.inverse.label"
        },
        {
          "value": "gradient-background-1",
          "label": "t:sections.all.colors.gradient_background_1.label"
        }
      ],
      "default": "accent-1",
      "label": "Section color scheme"
    },
    {
      "type": "header",
      "content": "Padding"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 2,
      "unit": "px",
      "label": "Top padding",
      "default": 24
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 2,
      "unit": "px",
      "label": "Bottom padding",
      "default": 24
    }
  ],
  "presets": [
    {
      "name": "Before and after"
    }
  ],
  "disabled_on": {
    "groups": ["header", "footer"]
  }
}
{% endschema %}
